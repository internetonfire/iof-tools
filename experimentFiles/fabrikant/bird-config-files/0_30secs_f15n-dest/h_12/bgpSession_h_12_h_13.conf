        # Protocol used with a bgp peer

        function rt_export_h_12_h_13 ()
        {
          # If it's from my static protocol export it
          if proto = "static_bgp" then return true;
          if net_martian() then return false;
          # Check from who comes the net informations
          # return bgp_next_hop ~ [ 100.1.1.1, 100.1.1.2, 200.1.1.1 ];
          # Clients list
          return bgp_next_hop ~ [10.0.0.65, 10.0.0.69];
          reject;
        }

        filter filter_in_h_12_h_13
        {
            if ! rt_import_all(14) then reject;
            accept;
        }

        filter filter_out_h_12_h_13
        {
            if ! rt_export_h_12_h_13() then reject;
            if !defined(bgp_path) then bgp_path.empty;
            #bgp_path.prepend(13);
            #bgp_path.prepend(13);
            #bgp_path.prepend(13);
            #bgp_path.prepend(13);
            #bgp_path.prepend(13);
            #bgp_path.prepend(13);
            accept;
        }

        protocol bgp h_12_h_13 {
            # local addr used by the interface and AS of the local peer
            local 10.0.0.73 as 13;
            # Addr of the neighbor and it's AS
            neighbor 10.0.0.74 as 14;
            hold time 15;
            mrai time 30000;
            mrai type 0;
            mrai jitter 5;
            ipv4{
                import filter filter_in_h_12_h_13;
                # export where proto = "export_protocol";
                export filter filter_out_h_12_h_13;
                next hop self;
            };
            direct;
            connect retry time 5;
            connect delay time 10;
            startup hold time 10;
            default bgp_local_pref 1;
            strict bind;
        }
